/*CRIE UM TRIGGER QUE, SEMPRE QUE HOUVER DECREMENTO DA QUANTIDADE EM ESTOQUE DE UM DETERMINADO PRODUTO, 
DECREMENTE TAMBÉM, CASO SEJA NECESSÁRIO, A QUANTIDADE EM ESTOQUE DO PRODUTOS QUE SÃO COMPOSTOS POR AQUELE QUE FOI DECREMENTADO.*/

-- Função
CREATE FUNCTION controlador_estoque() RETURNS TRIGGER AS 
$$
DECLARE
    rec RECORD;
BEGIN
    -- Atualiza o valor total da venda
    UPDATE VENDA
    SET VALOR_TOTAL = ( 
        SELECT SUM(IV.QTD_VENDIDA * P.VALOR)
        FROM ITEM_VENDA AS IV
        JOIN PRODUTO AS P ON P.COD_PROD = IV.COD_PROD
        WHERE IV.COD_VENDA = NEW.COD_VENDA
    )
    WHERE COD_VENDA = NEW.COD_VENDA;

    -- Se for combo, decrementa apenas os itens que o compõem
    IF NEW.COD_PROD = 4 OR NEW.COD_PROD = 5 THEN
        FOR rec IN
            SELECT COD_PROD_DO_COMBO, QTD_PROD_NO_COMBO
            FROM COMBO
            WHERE COD_COMBO = NEW.COD_PROD
        LOOP
            UPDATE PRODUTO
            SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE - (rec.QTD_PROD_NO_COMBO * NEW.QTD_VENDIDA)
            WHERE COD_PROD = rec.COD_PROD_DO_COMBO;
        END LOOP;
    ELSE
        -- Se não for combo, decrementa o estoque normalmente
        UPDATE PRODUTO 
        SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE - NEW.QTD_VENDIDA
        WHERE COD_PROD = NEW.COD_PROD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- CLIENTE
CREATE TABLE CLIENTE (
    COD_CLIENTE SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    DT_NASC DATE NOT NULL
);

-- FUNCIONARIO
CREATE TABLE FUNCIONARIO (
    COD_FUNC SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    DT_NASC DATE NOT NULL
);

-- PRODUTO
CREATE TABLE PRODUTO (
    COD_PROD SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    VALOR NUMERIC(10,2) NOT NULL,
    QTD_EM_ESTOQUE INT NOT NULL
);

-- COMBO (auto-relacionamento de PRODUTO)
CREATE TABLE COMBO (
    COD_COMBO INT REFERENCES PRODUTO(COD_PROD),
    COD_PROD_DO_COMBO INT REFERENCES PRODUTO(COD_PROD),
    QTD_PROD_NO_COMBO INT NOT NULL,
    PRIMARY KEY (COD_COMBO, COD_PROD_DO_COMBO)
);

-- VENDA
CREATE TABLE VENDA (
    COD_VENDA SERIAL PRIMARY KEY,
    COD_CLIENTE INT REFERENCES CLIENTE(COD_CLIENTE),
    COD_FUNC INT REFERENCES FUNCIONARIO(COD_FUNC),
    DT_VENDA TIMESTAMP NOT NULL,
    VALOR_TOTAL NUMERIC(10,2)
);

-- ITEM_VENDA
CREATE TABLE ITEM_VENDA (
    COD_ITEM_VENDA SERIAL PRIMARY KEY,
    COD_VENDA INT REFERENCES VENDA(COD_VENDA),
    COD_PROD INT REFERENCES PRODUTO(COD_PROD),
    QTD_VENDIDA INT NOT NULL
);

-- CLIENTES
INSERT INTO CLIENTE (NOME, DT_NASC) VALUES
('João Silva', '1990-05-20'),
('Maria Oliveira', '1985-09-15');

-- FUNCIONÁRIOS
INSERT INTO FUNCIONARIO (NOME, DT_NASC) VALUES
('Carlos Mendes', '1988-03-10'),
('Ana Souza', '1992-07-25');

-- PRODUTOS 
INSERT INTO PRODUTO (COD_PROD, NOME, VALOR, QTD_EM_ESTOQUE) VALUES
(1, 'Hamburguer', 30.00, 50),
(2, 'Refrigerante', 10.00, 50),
(3, 'Batata Frita', 15.00, 50),
(4, 'Combo 1 (Hamburguer + Refri)', 35.00, 50),
(5, 'Combo 2 (Hamb + Refri + Batata)', 50.00, 50);

-- COMBO 
INSERT INTO COMBO (COD_COMBO, COD_PROD_DO_COMBO, QTD_PROD_NO_COMBO) VALUES
(4, 1, 1),  -- Combo 1 → 1 Hamburguer
(4, 2, 1),  -- Combo 1 → 1 Refrigerante
(5, 1, 1),  -- Combo 2 → 1 Hamburguer
(5, 2, 1),  -- Combo 2 → 1 Refrigerante
(5, 3, 1);  -- Combo 2 → 1 Batata Frita

-- Trigger
CREATE TRIGGER CONTROLADOR_ESTOQUE_TG
AFTER INSERT ON ITEM_VENDA
FOR EACH ROW EXECUTE FUNCTION controlador_estoque();

-- Testes
SELECT * FROM CLIENTE
SELECT * FROM FUNCIONARIO
SELECT * FROM PRODUTO
SELECT * FROM COMBO
SELECT * FROM VENDA
SELECT * FROM ITEM_VENDA

-- Vendendo apenas 1 hamburguer
INSERT INTO VENDA (COD_CLIENTE, COD_FUNC, DT_VENDA, VALOR_TOTAL)
VALUES
(1, 1, CURRENT_TIMESTAMP, NULL);

SELECT * FROM VENDA

INSERT INTO ITEM_VENDA (COD_VENDA, COD_PROD, QTD_VENDIDA)
VALUES
(1, 1, 1)

SELECT * FROM ITEM_VENDA
SELECT * FROM VENDA
SELECT * FROM PRODUTO

-- Vendendo 1 combo 1
INSERT INTO VENDA (COD_CLIENTE, COD_FUNC, DT_VENDA, VALOR_TOTAL)
VALUES
(2, 2, CURRENT_TIMESTAMP, NULL);

SELECT * FROM VENDA

INSERT INTO ITEM_VENDA (COD_VENDA, COD_PROD, QTD_VENDIDA)
VALUES
(2, 4, 1)

SELECT * FROM ITEM_VENDA
SELECT * FROM VENDA
SELECT * FROM PRODUTO

-- Vendendo 1 combo 2
INSERT INTO VENDA (COD_CLIENTE, COD_FUNC, DT_VENDA, VALOR_TOTAL)
VALUES
(2, 2, CURRENT_TIMESTAMP, NULL);

SELECT * FROM VENDA

INSERT INTO ITEM_VENDA (COD_VENDA, COD_PROD, QTD_VENDIDA)
VALUES
(3, 5, 1)

SELECT * FROM ITEM_VENDA
SELECT * FROM VENDA
SELECT * FROM PRODUTO
